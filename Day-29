1945. Sum of Digits of String After Convert
Easy

596

62

Add to List

Share
You are given a string s consisting of lowercase English letters, and an integer k.

First, convert s into an integer by replacing each letter with its position in the alphabet (i.e., replace 'a' with 1, 'b' with 2, ..., 'z' with 26). Then, transform the integer by replacing it with the sum of its digits. Repeat the transform operation k times in total.

For example, if s = "zbax" and k = 2, then the resulting integer would be 8 by the following operations:

Convert: "zbax" ➝ "(26)(2)(1)(24)" ➝ "262124" ➝ 262124
Transform #1: 262124 ➝ 2 + 6 + 2 + 1 + 2 + 4 ➝ 17
Transform #2: 17 ➝ 1 + 7 ➝ 8
Return the resulting integer after performing the operations described above.

 

Example 1:

Input: s = "iiii", k = 1
Output: 36
Explanation: The operations are as follows:
- Convert: "iiii" ➝ "(9)(9)(9)(9)" ➝ "9999" ➝ 9999
- Transform #1: 9999 ➝ 9 + 9 + 9 + 9 ➝ 36
Thus the resulting integer is 36.
Example 2:

Input: s = "leetcode", k = 2
Output: 6
Explanation: The operations are as follows:
- Convert: "leetcode" ➝ "(12)(5)(5)(20)(3)(15)(4)(5)" ➝ "12552031545" ➝ 12552031545
- Transform #1: 12552031545 ➝ 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 ➝ 33
- Transform #2: 33 ➝ 3 + 3 ➝ 6
Thus the resulting integer is 6.
Example 3:

Input: s = "zbax", k = 2
Output: 8
class Solution {
    public int getLucky(String s, int k) {
        StringBuilder str=new StringBuilder();
        for(int i:s.toCharArray()){
            str.append((i-97)+1);
        }
        String sr=str.toString();
        int t=0;
        for(int i=0;i<k;i++){
            t=0;
            for(char ch:sr.toCharArray()){
                t+=ch-'0';
            }
            sr=String.valueOf(t);
            
        }return t;
    }
}


------------------------------------------------
1796. Second Largest Digit in a String
Easy

516

128

Add to List

Share
Given an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist.

An alphanumeric string is a string consisting of lowercase English letters and digits.

 

Example 1:

Input: s = "dfa12321afd"
Output: 2
Explanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2.
Example 2:

Input: s = "abc1111"
Output: -1
Explanation: The digits that appear in s are [1]. There is no second largest digit. 
class Solution {
    public int secondHighest(String s) {
        char a[]=s.toCharArray();
        ArrayList<Integer>b=new ArrayList<>();
        for(int i=0;i<a.length;i++){
            if(Character.isDigit(a[i])){
                b.add(Character.getNumericValue(a[i]));
            }
        }
       int max = Integer.MIN_VALUE;
        int smax = Integer.MIN_VALUE;
        for (int i : b) {
            if (i > max) {
                smax = max;
                max = i;
            } else if (i < max && i > smax) {
                smax = i;
            }
        }
         if (smax == Integer.MIN_VALUE) {
            return -1;
        }
        
        return smax;
    }
}
