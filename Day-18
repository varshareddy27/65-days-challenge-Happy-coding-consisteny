1-1-24
Integer.bitCount();
returns the no of 1 bits
   int p=2;
        int a=Integer.bitCount(p);
        System.out.print(a);
          o/p-1
          leetcode 461
          The Hamming distance between two integers is the number of positions at which the corresponding bits are different.
Given two integers x and y, return the Hamming distance between them.
Example 1:
Input: x = 1, y = 4
Output: 2
Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑
The above arrows point to positions where the corresponding bits are different.
Example 2:

Input: x = 3, y = 1
Output: 1
  class Solution {
    public int hammingDistance(int x, int y) {   
       return Integer.bitCount(x^y);
}
}
or
  class Solution {
    public int hammingDistance(int x, int y) {
        int a=x^y;
        int c=0;
        String b=Integer.toBinaryString(a);
        for(int i=0;i<b.length();i++){
            if(b.charAt(i)=='1'){
                c++;
            }
        }
        return c;
    }
}
--------------------------------------------------
  342. Power of Four
Given an integer n, return true if it is a power of four. Otherwise, return false.
An integer n is a power of four, if there exists an integer x such that n == 4x.
Example 1:
Input: n = 16
Output: true
Example 2:
Input: n = 5
Output: false
Example 3:
Input: n = 1
Output: true
  class Solution {
    public boolean isPowerOfFour(int n) {
        int a;
        for(int i=0;i<=15;i++){
            a=(int)Math.pow(4,i);
            if(n==a){
                return true;
            }
          if(a>n){
                return false;//optional
            }
        }
        return false;
    }
} or
  class Solution {
    public boolean isPowerOfFour(int n) {
        if((n&(n-1))==0){
            if((n-1)%3==0){
                return true;
            }
        }
           return false;
    }
}
---------------------------------
  program to convert given to octal,hexadecimal uing bit manipulation
    import java.util.*;
public class Main {
    public static void main(String[] args) {
        int n = 15; // Replace this with your desired decimal number
        String s = "";
        while (n > 0) {
            int m = n & 7;
            s = m + s;
            n = n >>> 3;
        }
        System.out.print("Octal representation: " + s);
    }
}
or
  ----------------------------------
  unset all the even given bits
  tc:-
    n=23
    21
    import java.util.*;
public class Main
{
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int m=n&0x55555555;
		System.out.print(m);
	}
}
----------------------------------
  190. Reverse Bits
Easy

4917

1344

Add to List

Share
Reverse bits of a given 32 bits unsigned integer.

Note:

Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.
 

Example 1:

Input: n = 00000010100101000001111010011100
Output:    964176192 (00111001011110000010100101000000)
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.
Example 2:

Input: n = 11111111111111111111111111111101
Output:   3221225471 (10111111111111111111111111111111)
Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.
public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        int r=0;
        int i;
        for(i=0;i<=31;i++){
            r=r<<1;
            if((n&1)==1){
                r=r|1;
            }
            n=n>>1;
        }
        return r;
    }
}
------------------------------------------------------------------
693. Binary Number with Alternating Bits
Easy

1314

110

Add to List

Share
Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.

 

Example 1:

Input: n = 5
Output: true
Explanation: The binary representation of 5 is: 101
Example 2:

Input: n = 7
Output: false
Explanation: The binary representation of 7 is: 111.
Example 3:

Input: n = 11
Output: false
Explanation: The binary representation of 11 is: 1011.
class Solution {
    public boolean hasAlternatingBits(int n) {
        String a=Integer.toBinaryString(n);
        for(int i=1;i<a.length();i++){
            if(a.charAt(i)==a.charAt(i-1))
            {
                return false;
            }
        }
        return true;
    }
}
or
class Solution {
    public boolean hasAlternatingBits(int n) {
        int a,b;
        while(n!=0){
            a=n&1;
            n=n>>1;
            b=n&1;
            if(a==b){
                return false;
            }
        }
        return true;
    }
}

  

  
  
