Given an integer array nums, find the subarray with the largest sum, and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
class Solution {
    public int maxSubArray(int[] nums) {
        int cs=0,max=Integer.MIN_VALUE;
		for(int i=0;i<nums.length;i++)
		{
    cs+=nums[i];
    if(cs>max){
        max=cs;
    }
            if(cs<0){
                cs=0;
            }
		}
		return max;
    }
}
/*
 int maxSum = Integer.MIN_VALUE;
        int currentSum = 0;
        
        for (int i = 0; i < nums.length; i++) {
            currentSum += nums[i];
            
            if (currentSum > maxSum) {
                maxSum = currentSum;
            }
            
            if (currentSum < 0) {
                currentSum = 0;
            }
        }
        
        return maxSum;
*/
/*class Solution {
    public int maxSubArray(int[] nums) {
        int currentSum = 0;
        int maxSum = Integer.MIN_VALUE;
        for (int i=0;i<nums.length;i++) {
            currentSum = Math.max(nums[i], currentSum + nums[i]);
            maxSum = Math.max(maxSum, currentSum);
        }

        return maxSum;
    }
}
*/
-------------------------------------------------------------------
290. Word Pattern
Given a pattern and a string s, find if s follows the same pattern.
Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.
Example 1:
Input: pattern = "abba", s = "dog cat cat dog"
Output: true
Example 2:
Input: pattern = "abba", s = "dog cat cat fish"
Output: false
Example 3:
Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false
Constraints:
1 <= pattern.length <= 300
pattern contains only lower-case English letters.
1 <= s.length <= 3000
s contains only lowercase English letters and spaces ' '.
s does not contain any leading or trailing spaces.
All the words in s are separated by a single space.
class Solution {
    public boolean wordPattern(String pattern, String s) {
        String str[]=s.split(" ");
        if(pattern.length()!=str.length){
            return false;
        }  
            Map<Character,String>chtw =new HashMap<>();
            Map<String,Character>wtch=new HashMap<>();
        for(int i=0;i<pattern.length();i++){
            char c=pattern.charAt(i);
            String w=str[i];
            if(!chtw.containsKey(c)){
                chtw.put(c,w);
            }
            if(!wtch.containsKey(w)){
                wtch.put(w,c);
            }
            if(!chtw.get(c).equals(w)||!wtch.get(w).equals(c)){//value get(c)
                return false;
            }
        }   
        return true;
    }
}

