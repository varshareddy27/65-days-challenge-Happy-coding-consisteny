448,728,2824,169,217,287
217. Contains Duplicate
Easy

11467

1270

Add to List

Share
Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

 

Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false
Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true
 class Solution {
    public boolean containsDuplicate(int[] nums) {
       /* Arrays.sort(nums); 
        for (int i = 0; i < nums.length - 1; i++) {
                if (nums[i] == nums[i+1]) {
                    return true;
                }
        }
        return false;*/
    /*    method-2
        int c=0;
        Map<Integer,Integer>a=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(a.containsKey(nums[i])){
                return true;
            }
            else
            {
                a.put(nums[i],1);
            }
        }return false;
        */
        Set<Integer>a=new HashSet<>();
        for(int i=0;i<nums.length;i++){
            if(a.contains(nums[i])){
                return true;
            }
            a.add(nums[i]);
        }
        return false;
    }
}
----------------------------
287. Find the Duplicate Number
Medium

22212

4029

Add to List

Share
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
 class Solution {
    public int findDuplicate(int[] nums) {
       Arrays.sort(nums);
        for(int i=0;i<nums.length-1;i++){
            if(nums[i]==nums[i+1])
            {
                return nums[i];
            }        }
           return -1;
    } 
}
