2553. Separate the Digits in an Array
Given an array of positive integers nums, return an array answer that consists of the digits of each integer in nums after separating them in the same order they appear in nums.
To separate the digits of an integer is to get all the digits it has in the same order.
For example, for the integer 10921, the separation of its digits is [1,0,9,2,1].
Example 1:
Input: nums = [13,25,83,77]
Output: [1,3,2,5,8,3,7,7]
Explanation: 
- The separation of 13 is [1,3].
- The separation of 25 is [2,5].
- The separation of 83 is [8,3].
- The separation of 77 is [7,7].
answer = [1,3,2,5,8,3,7,7]. Note that answer contains the separations in the same order.
Example 2:
Input: nums = [7,1,3,9]
Output: [7,1,3,9]
Explanation: The separation of each integer in nums is itself.
answer = [7,1,3,9].

APPROACH:-
Considered an ArrayList and accessed the one-one element from Array and using modulo calculated last to first digit later took an another arraylist and accessed the elements in arraylist from the end and stored in the second ArrayList. repeatedly performed untill the array elements are done and arraylist elements are assigned to an Array An return the Array.
class Solution {
    public int[] separateDigits(int[] nums) {
        ArrayList <Integer>b=new ArrayList<>();
        for(int num:nums){
            ArrayList <Integer>a=new ArrayList<>();
            while(num!=0){
                a.add(num%10);
                num/=10;
            }
            for(int j=a.size()-1;j>=0;j--){
                b.add(a.get(j));
            }
        }
        int c[]=new int[b.size()];
        for(int i=0;i<b.size();i++){
            c[i]=b.get(i);
        }
        return c;    
    }
}
 ------------------------------------------------------------------
1742. Maximum Number of Balls in a Box
Easy

599

154

Add to List

Share
You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity.

Your job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number 321 will be put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in the box number 1 + 0 = 1.

Given two integers lowLimit and highLimit, return the number of balls in the box with the most balls.

 

Example 1:

Input: lowLimit = 1, highLimit = 10
Output: 2
Explanation:
Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...
Ball Count:  2 1 1 1 1 1 1 1 1 0  0  ...
Box 1 has the most number of balls with 2 balls.
Example 2:

Input: lowLimit = 5, highLimit = 15
Output: 2
Explanation:
Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...
Ball Count:  1 1 1 1 2 2 1 1 1 0  0  ...
Boxes 5 and 6 have the most number of balls with 2 balls in each.
Example 3:

Input: lowLimit = 19, highLimit = 28
Output: 2
Explanation:
Box Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...
Ball Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...
Box 10 has the most number of balls with 2 balls.
 
class Solution {
    public int countBalls(int lowLimit, int highLimit) {
        int a=lowLimit;
        int b=highLimit;
        int s=0;
        int max=0;
        HashMap<Integer,Integer>c=new HashMap<>();
        for(int i=a;i<=b;i++){
            s=0;
            int j=i;
            while(j!=0){
                s+=j%10;
                j/=10;
            }
            if(!c.containsKey(s)){
                c.put(s,1);
            }
            else{
                c.put(s,c.get(s)+1);
            }
            if(c.get(s)>=max){
                max=c.get(s);
            }
        }
        return max;
    }
}
-----------------------------------------------------------------------------------
